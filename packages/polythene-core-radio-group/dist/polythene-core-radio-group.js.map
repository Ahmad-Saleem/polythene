{"version":3,"file":"polythene-core-radio-group.js","sources":["../src/classes.js","../src/radio-group.js"],"sourcesContent":["\nexport default {\n  component:       \"pe-radio-group\",\n};\n","import { filterSupportedAttributes } from \"polythene-core\";\nimport classes from \"./classes\";\n\nexport const getElement = vnode =>\n  vnode.attrs.element || \"div\";\n\nexport const getInitialState = (vnode, createStream) => {\n  const checkedValue = createStream();\n  return {\n    checkedValue,\n    redrawOnUpdate: createStream.merge([checkedValue])\n  };\n};\n\nexport const createProps = (vnode, { keys: k }) => {\n  const attrs = vnode.attrs;\n  return Object.assign(\n    {},\n    filterSupportedAttributes(attrs),\n    {\n      className: [\n        classes.component,\n        attrs.tone === \"dark\" ? \"pe-dark-tone\" : null,\n        attrs.tone === \"light\" ? \"pe-light-tone\" : null,\n        attrs.className || attrs[k.class],\n      ].join(\" \"),\n    }\n  );\n};\n\nexport const createContent = (vnode, { renderer: h, RadioButton }) => {\n  const attrs = vnode.attrs;\n  const state = vnode.state;\n  const checkedValue = state.checkedValue();\n\n  const buttons = attrs.content\n    ? attrs.content\n    : attrs.buttons\n      ? attrs.buttons\n      : attrs.children || vnode.children || [];\n\n  return buttons.length\n    ? buttons.map(buttonOpts => {\n      if (!buttonOpts) {\n        return null;\n      }\n      // Only set defaultChecked the first time when no value has been stored yet\n      const isDefaultChecked = (buttonOpts.defaultChecked || buttonOpts.checked) && checkedValue === undefined;\n      if (buttonOpts.value === undefined) {\n        console.error(\"Option 'value' not set for radio button\"); // eslint-disable-line no-console\n      }\n      const isChecked = isDefaultChecked || attrs.checked || checkedValue === buttonOpts.value;\n      return h(RadioButton, Object.assign(\n        {},\n        {\n          /* group attributes that may be overwritten by individual buttons */\n          name: attrs.name,\n          key: buttonOpts.value\n        },\n        attrs.all,\n        /* individual button options */\n        buttonOpts,\n        {\n          /* this component's options */\n          onChange: newState => (\n            state.checkedValue(newState.value),\n            attrs.onChange && attrs.onChange({ value: newState.value })\n          ),\n          checked: isChecked\n        }\n      ));\n    })\n    : null;\n};\n"],"names":["getElement","vnode","attrs","element","getInitialState","createStream","checkedValue","merge","createProps","k","keys","_extends","filterSupportedAttributes","classes","component","tone","className","class","join","createContent","h","renderer","RadioButton","state","buttons","content","children","length","map","buttonOpts","isDefaultChecked","defaultChecked","checked","undefined","value","error","isChecked","name","all","newState","onChange"],"mappings":"4PACA,kBACmB,sLCCNA,EAAa,kBACxBC,GAAMC,MAAMC,SAAW,OAEZC,EAAkB,SAACH,EAAOI,MAC/BC,GAAeD,yCAGHA,EAAaE,OAAOD,MAI3BE,EAAc,SAACP,QAAeQ,KAANC,KAC7BR,EAAQD,EAAMC,YACbS,MAELC,4BAA0BV,eAGtBW,EAAQC,UACO,SAAfZ,EAAMa,KAAkB,eAAiB,KAC1B,UAAfb,EAAMa,KAAmB,gBAAkB,KAC3Cb,EAAMc,WAAad,EAAMO,EAAEQ,QAC3BC,KAAK,QAKAC,EAAgB,SAAClB,QAAmBmB,KAAVC,SAAaC,IAAAA,YAC5CpB,EAAQD,EAAMC,MACdqB,EAAQtB,EAAMsB,MACdjB,EAAeiB,EAAMjB,eAErBkB,EAAUtB,EAAMuB,QAClBvB,EAAMuB,QACNvB,EAAMsB,QACJtB,EAAMsB,QACNtB,EAAMwB,UAAYzB,EAAMyB,mBAEvBF,GAAQG,OACXH,EAAQI,IAAI,gBACPC,QACI,SAGHC,IAAoBD,EAAWE,gBAAkBF,EAAWG,cAA6BC,KAAjB3B,MACrD2B,KAArBJ,EAAWK,eACLC,MAAM,8CAEVC,GAAYN,GAAoB5B,EAAM8B,SAAW1B,IAAiBuB,EAAWK,YAC5Ed,GAAEE,EAAaX,WAIZT,EAAMmC,SACPR,EAAWK,OAElBhC,EAAMoC,gBAKM,kBACRf,GAAMjB,aAAaiC,EAASL,OAC5BhC,EAAMsC,UAAYtC,EAAMsC,UAAWN,MAAOK,EAASL,iBAE5CE,OAIb"}