{"version":3,"sources":["scroll-to.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAM,WAAW,SAAX,QAAW,CAAC,IAAD,EAAU;AACvB,QAAM,UAAU,KAAK,OAAL,CADO;AAEvB,QAAM,QAAQ,IAAC,CAAK,SAAL,KAAmB,YAAnB,GAAmC,YAApC,GAAmD,WAAnD,CAFS;AAGvB,QAAM,KAAK,KAAK,EAAL,CAHY;AAIvB,QAAM,WAAW,KAAK,QAAL,GAAgB,IAAhB,CAJM;AAKvB,QAAM,QAAQ,QAAQ,KAAR,CAAR,CALiB;AAMvB,QAAM,SAAS,KAAK,KAAL,CANQ;AAOvB,QAAM,iBAAiB,IAAI,IAAJ,GAAW,OAAX,EAAjB,CAPiB;AAQvB,QAAI,YAAY,IAAZ,CARmB;AASvB,QAAI,WAAW,kBAAE,QAAF,EAAX,CATmB;AAUvB,QAAM,gBAAgB,SAAhB,aAAgB,GAAW;AAC7B,YAAI,CAAC,SAAD,EAAY;AACZ,mBADY;SAAhB;AAGA,yBAAiB,aAAjB,EAJ6B;AAK7B,YAAM,MAAM,IAAI,IAAJ,GAAW,OAAX,EAAN,CALuB;AAM7B,YAAM,aAAc,CAAC,MAAM,cAAN,CAAD,GAAyB,QAAzB,CANS;AAO7B,YAAM,MAAM,QAAQ,SAAS,iBAAO,cAAP,CAAsB,UAAtB,CAAT,CAPS;AAQ7B,gBAAQ,KAAR,IAAiB,GAAjB,CAR6B;AAS7B,YAAI,cAAc,CAAd,EAAiB;AACjB,oBAAQ,KAAR,IAAiB,EAAjB,CADiB;AAEjB,wBAAY,KAAZ,CAFiB;AAGjB,qBAAS,OAAT,GAHiB;SAArB;KATkB,CAVC;AAyBvB,qBAAiB,aAAjB,EAzBuB;AA0BvB,WAAO,SAAS,OAAT,CA1BgB;CAAV;;AA6BjB,IAAM,mBAAmB,YAAO;AAC5B,WAAO,OAAO,qBAAP,IAAgC,OAAO,2BAAP,IAAsC,OAAO,wBAAP,IAAoC,oBAAY;AACzH,eAAO,UAAP,CAAkB,QAAlB,EAA4B,OAAO,EAAP,CAA5B,CADyH;KAAZ,CADrF;CAAN,EAApB;;kBAMS","file":"scroll-to.js","sourcesContent":["/*\nAnimated scroll to a position.\nDerived from https://github.com/madebysource/animated-scrollto\nAdapted to Mithril and rewritten to es6.\n*/\n\nimport m from 'mithril';\nimport easing from 'polythene/common/easing';\n\n/*\nopts:\n    element: HTML Element\n    to: position\n    duration: seconds\n    direction: 'vertical' or 'horizontal'\n\n\nFunction is thennable:\n\n    scrollTo({\n        element: scroller,\n        to: left,\n        duration: .5,\n        direction: 'horizontal'\n    }).then(() => {\n        console.log('scroll done')\n    });\n\n*/\nconst scrollTo = (opts) => {\n    const element = opts.element;\n    const which = (opts.direction === 'horizontal') ? 'scrollLeft' : 'scrollTop';\n    const to = opts.to;\n    const duration = opts.duration * 1000;\n    const start = element[which];\n    const change = to - start;\n    const animationStart = new Date().getTime();\n    let animating = true;\n    let deferred = m.deferred();\n    const animateScroll = function() {\n        if (!animating) {\n            return;\n        }\n        requestAnimFrame(animateScroll);\n        const now = new Date().getTime();\n        const percentage = ((now - animationStart) / duration);\n        const val = start + change * easing.easeInOutCubic(percentage);\n        element[which] = val;\n        if (percentage >= 1) {\n            element[which] = to;\n            animating = false;\n            deferred.resolve();\n        }\n    };\n    requestAnimFrame(animateScroll);\n    return deferred.promise;\n};\n\nconst requestAnimFrame = (() => {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || (callback => {\n        window.setTimeout(callback, 1000 / 60);\n    });\n})();\n\nexport default scrollTo;\n"]}