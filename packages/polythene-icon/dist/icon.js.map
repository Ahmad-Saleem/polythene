{"version":3,"file":null,"sources":["../src/theme/vars.js","../src/theme/layout.js","../src/theme/color.js","../src/theme/index.js","../src/icon.js"],"sourcesContent":["import { vars } from \"polythene-theme\";\n\nexport default {\n  size_small:   vars.unit_icon_size_small,\n  size_regular: vars.unit_icon_size,\n  size_medium:  vars.unit_icon_size_medium,\n  size_large:   vars.unit_icon_size_large,\n  color:        \"currentcolor\" \n};\n","import { mixin } from \"polythene-css\";\nimport { vars } from \"polythene-theme\";\n\nconst iconSizesPx = (size = vars.unit_icon_size) => ({\n  width: size + \"px\",\n  height: size + \"px\"\n});\n\nconst createStyles = componentVars => [{\n  \".pe-icon\": {\n    display: \"inline-block\",\n    \"vertical-align\": \"middle\",\n    \"background-repeat\": \"no-repeat\",\n    position: \"relative\",\n    \"font-size\": 0,\n    \"line-height\": 0,\n\n    \"&.pe-icon--avatar img\": {\n      border: \"none\",\n      \"border-radius\": \"50%\",\n      width: \"100%\",\n      height: \"100%\"\n    },\n\n    \" img\": {\n      height: \"100%\"\n    },\n\n    \" svg\": {\n      width: \"100%\",\n      height: \"100%\"\n    },\n\n    \"&.pe-icon--small\":   iconSizesPx(componentVars.size_small),\n    \"&.pe-icon--regular\": iconSizesPx(componentVars.size_regular),\n    \"&.pe-icon--medium\":  iconSizesPx(componentVars.size_medium),\n    \"&.pe-icon--large\":   iconSizesPx(componentVars.size_large)\n  }\n}];\n\nexport default componentVars => mixin.createStyles(componentVars, createStyles);\n\n","import { mixin } from \"polythene-css\";\n\nconst style = (componentVars, scope = \"\") => [{\n  [scope + \".pe-icon\"]: {\n    fill: componentVars.color,\n\n    \" svg\": {\n      fill: componentVars.color,\n      color: \"inherit\",\n\n      \" path, rect, circle, polygon\": {\n        \"&:not([fill=none])\": {\n          fill: componentVars.color\n        }\n      }\n    }\n  }\n}];\n\nconst createStyles = componentVars => [\n  style(componentVars)\n];\n\nexport default componentVars => mixin.createStyles(componentVars, createStyles);\n\n","import { styler } from \"polythene-css\";\nimport { styles } from \"polythene-theme\";\nimport vars from \"./vars\";\nimport layout from \"./layout\";\nimport color from \"./color\";\n\nconst key = \"icon\";\nconst className = \"pe-icon\";\n\nconst styleComponent = (className, styles) =>\n  styler.styleComponent(className, styles, key, vars, layout, color);\n\nexport const customTheme = (className, vars) =>\n  // Inject additional styles as use className as key\n  styleComponent(className, styler.addComponentStyle(\n    className, styles, key, vars\n  ));\n\nstyleComponent(className, styles);\n","import m from \"mithril\";\nimport { filterSupportedAttributes } from \"polythene-core\";\nimport { svg } from \"polythene-svg\";\nimport { customTheme } from \"./theme\";\n\nconst classes = {\n  icon: \"pe-icon\",\n  avatar: \"pe-icon--avatar\",\n  small: \"pe-icon--small\",\n  regular: \"pe-icon--regular\",\n  medium: \"pe-icon--medium\",\n  large: \"pe-icon--large\"\n};\n\nconst typeClasses = {\n  small: classes.small,\n  regular: classes.regular,\n  medium: classes.medium,\n  large: classes.large\n};\n\nconst classForType = (mode = \"regular\") => typeClasses[mode];\n\nconst view = vnode => {\n  const attrs = vnode.attrs;\n  const element = attrs.element || \"div\";\n  const props = Object.assign(\n    {},\n    filterSupportedAttributes(attrs),\n    {\n      class: [\n        classes.icon,\n        classForType(attrs.type),\n        attrs.avatar ? classes.avatar : null,\n        attrs.class\n      ].join(\" \"),\n    },\n    attrs.events ? attrs.events : null\n  );\n  const content = attrs.content\n    ? attrs.content\n    : vnode.children && vnode.children[0]\n      ? vnode.children\n      : attrs.svg\n        ? m(svg, {...attrs.svg})\n        : attrs.msvg\n          ? m(svg, attrs.msvg)\n          : attrs.src\n            ? m(\"img\", {src: attrs.src})\n            : null;\n  return m(element, props, [attrs.before, content, attrs.after]);\n};\n\nexport const icon = {\n  theme: customTheme, // accepts (className, vars)\n  view\n};\n\n"],"names":["vars","unit_icon_size_small","unit_icon_size","unit_icon_size_medium","unit_icon_size_large","iconSizesPx","size","createStyles","componentVars","size_small","size_regular","size_medium","size_large","mixin","style","scope","color","key","className","styleComponent","styles","styler","layout","customTheme","addComponentStyle","classes","typeClasses","small","regular","medium","large","classForType","mode","view","attrs","vnode","element","props","babelHelpers.extends","filterSupportedAttributes","icon","type","avatar","class","join","events","content","children","svg","m","msvg","src","before","after"],"mappings":"wgBAEA,mBACgBA,OAAKC,kCACLD,OAAKE,2BACLF,OAAKG,iCACLH,OAAKI,2BACL,gBCJVC,EAAc,cAACC,0DAAON,OAAKE,4BACxBI,EAAO,YACNA,EAAO,OAGXC,EAAe,wCAER,gCACS,6BACG,qBACX,uBACG,gBACE,kCAGL,uBACS,YACV,cACC,uBAIA,sBAID,cACC,2BAGYF,EAAYG,EAAcC,iCAC1BJ,EAAYG,EAAcE,kCAC1BL,EAAYG,EAAcG,gCAC1BN,EAAYG,EAAcI,oCAIpBC,SAAMN,aAAaC,EAAeD,iSCtC5DO,EAAQ,SAACN,MAAeO,0DAAQ,eACnCA,EAAQ,iBACDP,EAAcQ,mBAGZR,EAAcQ,YACb,qEAIGR,EAAcQ,aAOxBT,EAAe,mBACnBO,EAAMN,yBAGwBK,SAAMN,aAAaC,EAAeD,ICjB5DU,EAAM,OACNC,EAAY,UAEZC,EAAiB,SAACD,EAAWE,SACjCC,UAAOF,eAAeD,EAAWE,EAAQH,EAAKjB,EAAMsB,EAAQN,IAEjDO,EAAc,SAACL,EAAWlB,YAEtBkB,EAAWG,SAAOG,kBAC/BN,EAAWE,SAAQH,EAAKjB,IAG5BmB,GAAeD,EAAWE,SCb1B,IAAMK,SACE,iBACE,wBACD,yBACE,0BACD,wBACD,kBAGHC,SACGD,EAAQE,cACNF,EAAQG,eACTH,EAAQI,aACTJ,EAAQK,OAGXC,EAAe,cAACC,0DAAO,gBAAcN,GAAYM,IAEjDC,EAAO,eACLC,GAAQC,EAAMD,MACdE,EAAUF,EAAME,SAAW,MAC3BC,EAAQC,KAEZC,4BAA0BL,WAGtBT,EAAQe,KACRT,EAAaG,EAAMO,MACnBP,EAAMQ,OAASjB,EAAQiB,OAAS,KAChCR,EAAMS,OACNC,KAAK,MAETV,EAAMW,OAASX,EAAMW,OAAS,MAE1BC,EAAUZ,EAAMY,QAClBZ,EAAMY,QACNX,EAAMY,UAAYZ,EAAMY,SAAS,GAC/BZ,EAAMY,SACNb,EAAMc,IACJC,EAAED,WAASd,EAAMc,MACjBd,EAAMgB,KACJD,EAAED,MAAKd,EAAMgB,MACbhB,EAAMiB,IACJF,EAAE,OAAQE,IAAKjB,EAAMiB,MACrB,WACLF,GAAEb,EAASC,GAAQH,EAAMkB,OAAQN,EAASZ,EAAMmB,SAG5Cb,SACJjB"}