{"version":3,"file":"polythene-scripts.js","sources":["../src/write-css.js"],"sourcesContent":["const autoprefixer = require(\"autoprefixer\");\nconst cssbeautify  = require(\"cssbeautify\");\nconst fs           = require(\"fs\");\nconst J2c          = require(\"j2c\");\nconst postcss      = require(\"postcss\");\nconst cssnano      = require(\"cssnano\");\nconst tar          = require(\"tar\");\n\nconst j2c = new J2c();\nconst COLOR_RED = \"\\x1b[31m\";\nconst COLOR_WHITE = \"\\x1b[37m\";\n\nconst makeStyleSheet = (...styles) =>\n  styles.reduce((acc, styleList) =>\n    // each style returns a list\n    Object.keys(styleList).length\n      ? (\n        styleList.forEach(style => {\n          const scoped = {\n            \"@global\": style\n          };\n          const sheet = j2c.sheet(scoped);\n          acc += sheet;      \n        }),\n        acc\n      )\n      : acc, \"\");\n\nconst beautifyCSS = cssString =>\n  cssbeautify(cssString, {\n    indent: \"  \"\n  });\n\nconst saveToFile = (path, cssString) => \n  fs.writeFileSync(path, cssString, \"ascii\", err => {  \n    // throws an error, you could also catch it here\n    if (err) throw err;\n  });\n\nexport const processCSS = ({ styles, path, autoPrefix }) => {\n  const cssString = styles.reduce((acc, current) => (\n    acc + makeStyleSheet(current)\n  ), \"\");\n  return { cssString, path, autoPrefix };\n};\n\nexport const writeCSS = ({ css, styles, path, autoPrefix, beautify, sourceMap=true, gzip }) => {\n  const cssString = css\n    ? css\n    : styles\n      ? styles.reduce((acc, current) => acc + makeStyleSheet(current), \"\")\n      : \"\";\n\n  const mapPath = `${path}.map`;\n\n  const plugins = [];\n  if (autoPrefix) {\n    plugins.push(autoprefixer());\n  }\n  plugins.push(cssnano({\n    preset:       \"default\",\n    reduceIdents: false,\n    zindex:       false,\n  }));\n\n  const options = sourceMap\n    ? {\n      to:  path,\n      map: { inline: false }\n    }\n    : {};\n\n  postcss(plugins)\n    .process(cssString, options)\n    .then(result => {\n      result.warnings().forEach(warn => {\n        console.warn(COLOR_RED, \"Warning\", COLOR_WHITE, warn.toString()); // eslint-disable-line no-console\n      });\n      saveToFile(path, beautify ? beautifyCSS(result.css) : result.css);\n      if (gzip) {\n        tar.c(\n          { gzip: true },\n          [path]\n        ).pipe(fs.createWriteStream(`${path}.gz`));\n      }\n      if (sourceMap) {\n        saveToFile(mapPath, result.map);\n      }\n    });\n};\n\n"],"names":["autoprefixer","require","cssbeautify","fs","J2c","postcss","cssnano","tar","j2c","makeStyleSheet","styles","reduce","acc","styleList","keys","length","forEach","scoped","style","sheet","beautifyCSS","cssString","saveToFile","path","writeFileSync","err","writeCSS","css","autoPrefix","beautify","sourceMap","gzip","current","mapPath","plugins","push","options","inline","process","then","warnings","warn","toString","result","c","pipe","createWriteStream","map"],"mappings":"2LAAA,IAAMA,GAAeC,QAAQ,gBACvBC,EAAeD,QAAQ,eACvBE,EAAeF,QAAQ,MACvBG,EAAeH,QAAQ,OACvBI,EAAeJ,QAAQ,WACvBK,EAAeL,QAAQ,WACvBM,EAAeN,QAAQ,OAEvBO,EAAM,GAAIJ,GAIVK,EAAiB,sCAAIC,+CACzBA,GAAOC,OAAO,SAACC,EAAKC,iBAEXC,KAAKD,GAAWE,QAEnBF,EAAUG,QAAQ,eACVC,cACOC,GAEPC,EAAQX,EAAIW,MAAMF,MACjBE,IAETP,GAEAA,GAAK,KAEPQ,EAAc,kBAClBlB,GAAYmB,UACF,QAGNC,EAAa,SAACC,EAAMF,SACxBlB,GAAGqB,cAAcD,EAAMF,EAAW,QAAS,eAErCI,EAAK,KAAMA,MAUNC,EAAW,eAAGC,KAAAA,IAAKjB,IAAAA,OAAQa,IAAAA,KAAMK,IAAAA,WAAYC,IAAAA,aAAUC,UAAAA,gBAAgBC,IAAAA,KAC5EV,EAAYM,IAEdjB,EACEA,EAAOC,OAAO,SAACC,EAAKoB,SAAYpB,GAAMH,EAAeuB,IAAU,IAC/D,IAEAC,EAAaV,SAEbW,IACFN,MACMO,KAAKnC,OAEPmC,KAAK7B,UACG,wBACA,UACA,QAGV8B,GAAUN,MAEPP,OACEc,QAAQ,SAIXH,GACLI,QAAQjB,EAAWe,GACnBG,KAAK,cACGC,WAAWxB,QAAQ,oBAChByB,KAnEE,QAmEc,UAlEZ,QAkEoCA,EAAKC,gBAE5CnB,EAAMM,EAAWT,EAAYuB,EAAOhB,KAAOgB,EAAOhB,KACzDI,KACEa,GACAb,MAAM,IACPR,IACDsB,KAAK1C,EAAG2C,kBAAqBvB,UAE7BO,KACSG,EAASU,EAAOI"}