{"version":3,"file":"polythene-md-end-spinner.js","sources":["../src/classes.js","../src/theme/vars.js","../src/theme/layout.js","../src/theme/color.js","../src/theme/index.js","../src/spinner.js"],"sourcesContent":["\nexport default {\n  component:          \"pe-md-end-spinner\",\n\n  // elements\n  animation:          \"pe-md-end-spinner__animation\",\n  circle:             \"pe-md-end-spinner__circle\",\n  circleRight:        \"pe-md-end-spinner__circle-right\",\n  circleLeft:         \"pe-md-end-spinner__circle-left\"\n};\n","\nimport { vars } from \"polythene-theme\";\nimport { vars as baseVars } from \"polythene-spinner\";\nconst rgba = vars.rgba;\n\nexport default Object.assign(\n  {},\n  baseVars,\n  {\n    border_width_small:   baseVars.size_small / baseVars.size_regular * 3,\n    border_width_regular: 3,\n    border_width_medium:  baseVars.size_medium / baseVars.size_regular * 3,\n    border_width_large:   baseVars.size_large / baseVars.size_regular * 3,\n    border_width_fab:     baseVars.size_fab / baseVars.size_regular * 3,\n    animation_duration:   \"1.5s\",\n\n    color_light:          rgba(vars.color_primary),\n    color_dark:           rgba(vars.color_primary)\n  }\n);\n","\nexport default (selector, componentVars) => [{\n  [selector]: {\n    position: \"relative\",\n\n    \" .pe-md-end-spinner__animation\": {\n      animationDuration: componentVars.animationDuration,\n      position: \"absolute\",\n      width: \"100%\",\n      height: \"100%\"\n    },\n\n    \" .pe-md-end-spinner__circle\": {\n      position: \"absolute\",\n      boxSizing: \"border-box\",\n      width: \"100%\",\n      height: \"100%\",\n      borderStyle: \"solid\",\n      borderRadius: \"50%\"\n    },\n\n    \" .pe-md-end-spinner__circle-left, .pe-md-end-spinner__circle-right\": {\n      transform: \"rotate(0)\",\n      clip: \"rect(0, 0, 0, 0)\"\n    }\n  }\n}];\n","\nconst style = (scopes, selector, componentVars, tint) => [{\n  [scopes.map(s => s + selector).join(\",\")]: {\n    color: componentVars[\"color_\" + tint],\n\n    \" .pe-md-end-spinner__circle\": {\n      borderColor: \"currentcolor\"\n    }\n  }\n}];\n\nexport default (selector, componentVars) => [\n  style([\".pe-dark-tone\", \".pe-dark-tone \"], selector, componentVars, \"dark\"), // has/inside dark theme\n  style([\"\", \".pe-light-tone\", \".pe-light-tone \"], selector, componentVars, \"light\"), // normal, has/inside light theme\n];\n","import { styler } from \"polythene-css\";\nimport classes from \"../classes\";\nimport vars from \"./vars\";\nimport layout from \"./layout\";\nimport color from \"./color\";\n\nconst fns = [layout, color];\nconst selector = `.${classes.component}`;\n\nexport const customTheme = (customSelector, customVars) => \n  styler.generateStyles([customSelector, selector], {...vars, ...customVars}, fns);\n\nstyler.generateStyles([selector], vars, fns);\n","import m from \"mithril\";\nimport spinner from \"polythene-spinner\";\nimport { customTheme } from \"./theme\";\nimport { easing } from \"polythene-utilities\";\nimport themeVars from \"./theme/vars\";\nimport classes from \"./classes\";\n\nconst sizeFromType = (type = \"regular\") => themeVars[\"size_\" + type];\n\nconst percentageValue = (min, max, percentage = 0) => min + ((max - min) * percentage);\n\nconst rotateCircle = (el, min, max, percentage) => {\n  const style = el.style;\n  style[\"transform\"] =\n    style[\"-webkit-transform\"] =\n    style[\"-moz-transform\"] =\n    style[\"-ms-transform\"] =\n    style[\"-o-transform\"] = \"rotate(\" + percentageValue(min, max, percentage) + \"deg)\";\n};\n\nconst animate = (stateEl, size, percentage) => {\n  const animationEl = stateEl.querySelector(\".\" + classes.animation);\n  const animationElStyle = animationEl.style;\n\n  if (percentage < 0.5) {\n    animationElStyle.clip = \"rect(0px, \" + size + \"px, \" + size + \"px, \" + size / 2 + \"px)\";\n  } else {\n    animationElStyle.clip = \"rect(auto, auto, auto, auto)\";\n  }\n\n  const leftCircle = stateEl.querySelector(\".\" + classes.circleLeft);\n  const rightCircle = stateEl.querySelector(\".\" + classes.circleRight);\n  leftCircle.style.clip = rightCircle.style.clip = \"rect(0px, \" + size / 2 + \"px, \" + size + \"px, \" + \"0px)\";\n  rotateCircle(rightCircle, 0, 180, Math.min(1, percentage * 2));\n  rotateCircle(leftCircle, 0, 360, percentage);\n};\n\nconst handlePercentage = (percentage, state, size, attrs = {}) => {\n  if (!state.el) {\n    return;\n  }\n  state.previousPercentage = state.previousPercentage || 0;\n  if (attrs.animated && state.previousPercentage !== percentage) {\n    const STEP_DURATION = attrs.updateDuration * 1000;\n    let start = null;\n    const step = timestamp => {\n      if (!start) start = timestamp;\n      const progress = timestamp - start;\n      const stepPercentage = 1.0 / STEP_DURATION * progress;\n      const newPercentage = state.previousPercentage + stepPercentage * (percentage - state.previousPercentage);\n      animate(state.el, size, easing.easeInOutQuad(newPercentage));\n      state.previousPercentage = newPercentage;\n      if (start && progress < STEP_DURATION) {\n        window.requestAnimationFrame(step);\n      } else {\n        start = null;\n      }\n    };\n    window.requestAnimationFrame(step);\n  } else {\n    animate(state.el, size, percentage);\n    state.previousPercentage = percentage;\n  }\n};\n\nconst view = ({ attrs }) => {\n  const rawSize = sizeFromType(attrs.type);\n  const { padding, paddedSize } = themeVars.raisedSize(rawSize);\n\n  const size = attrs.raised\n    ? paddedSize - 2 * padding\n    : rawSize;\n\n  attrs.content = m(\"div\",\n    {\n      class: classes.animation,\n      style: {\n        width: size + \"px\",\n        height: size + \"px\"\n      }\n    },\n    [\n      m(\"div\", {\n        class: [classes.circle, classes.circleLeft].join(\" \")\n      }),\n      m(\"div\", {\n        class: [classes.circle, classes.circleRight].join(\" \")\n      })\n    ]\n  );\n  attrs.instanceClass = classes.component;\n  attrs.getPercentage = (percentage, state) => handlePercentage(percentage, state, size, attrs);\n  return m(spinner, attrs);\n};\n\nexport default {\n  theme: customTheme, // accepts (selector, vars)\n  view\n};\n"],"names":["rgba","vars","_extends","baseVars","size_small","size_regular","size_medium","size_large","size_fab","color_primary","selector","componentVars","animationDuration","style","scopes","tint","map","s","join","fns","layout","color","classes","component","customTheme","customSelector","customVars","styler","generateStyles","sizeFromType","themeVars","percentageValue","min","max","rotateCircle","el","percentage","animate","stateEl","size","animationEl","querySelector","animation","animationElStyle","clip","leftCircle","circleLeft","rightCircle","circleRight","Math","handlePercentage","state","attrs","previousPercentage","animated","STEP_DURATION","updateDuration","start","step","timestamp","progress","stepPercentage","newPercentage","easing","easeInOutQuad","requestAnimationFrame","view","rawSize","type","raisedSize","padding","paddedSize","raised","content","m","circle","instanceClass","getPercentage","spinner"],"mappings":"i0BAEsB,8BAGA,sCACA,wCACA,6CACA,sMCLhBA,EAAOC,OAAKD,OAEHE,KAEbC,2BAEwBA,OAASC,WAAaD,OAASE,aAAe,uBAC9C,sBACAF,OAASG,YAAcH,OAASE,aAAe,qBAC/CF,OAASI,WAAaJ,OAASE,aAAe,mBAC9CF,OAASK,SAAWL,OAASE,aAAe,qBAC5C,mBAEAL,EAAKC,OAAKQ,0BACVT,EAAKC,OAAKQ,4BChBpBC,EAAUC,eACvBD,YACW,+DAGWC,EAAcC,2BACvB,iBACH,cACC,gDAIE,qBACC,mBACJ,cACC,mBACK,qBACC,uFAIH,iBACL,wBCtBNC,EAAQ,SAACC,EAAQJ,EAAUC,EAAeI,eAC7CD,EAAOE,IAAI,kBAAKC,GAAIP,IAAUQ,KAAK,YAC3BP,EAAc,SAAWI,8CAGjB,+BAKHL,EAAUC,UACxBE,GAAO,gBAAiB,kBAAmBH,EAAUC,EAAe,WAC7D,GAAI,iBAAkB,mBAAoBD,EAAUC,EAAe,+KCPtEQ,GAAOC,EAAQC,GACfX,MAAeY,EAAQC,UAEhBC,EAAc,SAACC,EAAgBC,SAC1CC,UAAOC,gBAAgBH,EAAgBf,QAAeT,EAASyB,GAAaP,GAE9EQ,UAAOC,gBAAgBlB,GAAWT,EAAMkB,ECLxC,IAAMU,GAAe,iBAAsBC,GAAU,gEAAxB,aAEvBC,EAAkB,SAACC,EAAKC,SAAwBD,IAAQC,EAAMD,2DAApB,IAE1CE,EAAe,SAACC,EAAIH,EAAKC,EAAKG,MAC5BvB,GAAQsB,EAAGtB,QACjB,UACEA,EAAM,qBACNA,EAAM,kBACNA,EAAM,iBACNA,EAAM,gBAAkB,UAAYkB,EAAgBC,EAAKC,EAAKG,GAAc,QAG1EC,EAAU,SAACC,EAASC,EAAMH,MACxBI,GAAcF,EAAQG,cAAc,IAAMnB,EAAQoB,WAClDC,EAAmBH,EAAY3B,QAGlB+B,KADfR,EAAa,GACS,aAAeG,EAAO,OAASA,EAAO,OAASA,EAAO,EAAI,MAE1D,kCAGpBM,GAAaP,EAAQG,cAAc,IAAMnB,EAAQwB,YACjDC,EAAcT,EAAQG,cAAc,IAAMnB,EAAQ0B,eAC7CnC,MAAM+B,KAAOG,EAAYlC,MAAM+B,KAAO,aAAeL,EAAO,EAAI,OAASA,EAAO,aAC9EQ,EAAa,EAAG,IAAKE,KAAKjB,IAAI,EAAgB,EAAbI,MACjCS,EAAY,EAAG,IAAKT,IAG7Bc,EAAmB,SAACd,EAAYe,EAAOZ,MAAMa,gEAC5CD,EAAMhB,QAGLkB,mBAAqBF,EAAME,oBAAsB,EACnDD,EAAME,UAAYH,EAAME,qBAAuBjB,EAAY,IACvDmB,GAAuC,IAAvBH,EAAMI,eACxBC,EAAQ,KACNC,EAAO,QAAPA,MACCD,IAAOA,EAAQE,MACdC,GAAWD,EAAYF,EACvBI,EAAiB,EAAMN,EAAgBK,EACvCE,EAAgBX,EAAME,mBAAqBQ,GAAkBzB,EAAae,EAAME,sBAC9EF,EAAMhB,GAAII,EAAMwB,SAAOC,cAAcF,MACvCT,mBAAqBS,EACvBL,GAASG,EAAWL,SACfU,sBAAsBP,KAErB,aAGLO,sBAAsBP,UAErBP,EAAMhB,GAAII,EAAMH,KAClBiB,mBAAqBjB,GAIzB8B,EAAO,eAAGd,KAAAA,MACRe,EAAUtC,EAAauB,EAAMgB,QACHtC,EAAUuC,WAAWF,GAA7CG,IAAAA,QAASC,IAAAA,WAEXhC,EAAOa,EAAMoB,OACfD,EAAa,EAAID,EACjBH,WAEEM,QAAUC,EAAE,aAEPpD,EAAQoB,uBAENH,EAAO,YACNA,EAAO,QAIjBmC,EAAE,cACQpD,EAAQqD,OAAQrD,EAAQwB,YAAY5B,KAAK,OAEnDwD,EAAE,cACQpD,EAAQqD,OAAQrD,EAAQ0B,aAAa9B,KAAK,WAIlD0D,cAAgBtD,EAAQC,YACxBsD,cAAgB,SAACzC,EAAYe,SAAUD,GAAiBd,EAAYe,EAAOZ,EAAMa,IAChFsB,EAAEI,EAAS1B,aAIX5B"}