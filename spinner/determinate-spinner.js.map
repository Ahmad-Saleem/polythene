{"version":3,"sources":["determinate-spinner.es6"],"names":[],"mappings":"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","file":"determinate-spinner.js","sourcesContent":["/*\nDerived from https://github.com/PolymerElements/paper-spinner\n\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport m from 'mithril';\nimport spinner from 'polythene/spinner/spinner';\nimport 'polythene/spinner/theme/determinate/theme';\nimport themeConfig from 'polythene/spinner/theme/determinate/config';\nimport easing from 'polythene/common/easing';\n\nconst CSS_CLASSES = {\n    block: 'pe-spinner-determinate',\n    animation: 'pe-spinner-determinate__animation',\n    circle: 'pe-spinner-determinate__circle',\n    circleRight: 'pe-spinner-determinate__circle--right',\n    circleLeft: 'pe-spinner-determinate__circle--left'\n};\n\nconst sizeFromType = (type = 'regular') => (themeConfig['size_' + type]);\n\nconst percentageValue = (min, max, percentage) => (min + ((max - min) * percentage));\n\nconst rotateCircle = (el, min, max, percentage) => {\n    const style = el.style;\n    style['transform'] =\n        style['-webkit-transform'] =\n        style['-moz-transform'] =\n        style['-ms-transform'] =\n        style['-o-transform'] = 'rotate(' + percentageValue(min, max, percentage) + 'deg)';\n};\n\nconst animate = (ctrlEl, size, percentage) => {\n    const animationEl = ctrlEl.querySelector('.' + CSS_CLASSES.animation);\n    const animationElStyle = animationEl.style;\n\n    if (percentage < 0.5) {\n        animationElStyle.clip = 'rect(0px, ' + size + 'px, ' + size + 'px, ' + size / 2 + 'px)';\n    } else {\n        animationElStyle.clip = 'rect(auto, auto, auto, auto)';\n    }\n\n    const leftCircle = ctrlEl.querySelector('.' + CSS_CLASSES.circleLeft);\n    const rightCircle = ctrlEl.querySelector('.' + CSS_CLASSES.circleRight);\n    leftCircle.style.clip = rightCircle.style.clip = 'rect(0px, ' + size / 2 + 'px, ' + size + 'px, ' + '0px)';\n    rotateCircle(rightCircle, 0, 180, Math.min(1, percentage * 2));\n    rotateCircle(leftCircle, 0, 360, percentage);\n};\n\nconst handlePercentage = (percentage, ctrl, size, opts = {}) => {\n    if (!ctrl.el) {\n        return;\n    }\n\n    ctrl._previousPercentage = ctrl._previousPercentage || 0;\n\n    if (opts.animated && ctrl._previousPercentage !== percentage) {\n        const STEP_DURATION = opts.updateDuration * 1000;\n        let start = null;\n        const step = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const stepPercentage = 1.0 / STEP_DURATION * progress;\n            const newPercentage = ctrl._previousPercentage + stepPercentage * (percentage - ctrl._previousPercentage);\n            animate(ctrl.el, size, easing.easeInOutQuad(newPercentage));\n            ctrl._previousPercentage = newPercentage;\n            if (start && progress < STEP_DURATION) {\n                window.requestAnimationFrame(step);\n            } else {\n                start = null;\n            }\n        };\n        window.requestAnimationFrame(step);\n    } else {\n        animate(ctrl.el, size, percentage);\n        ctrl._previousPercentage = percentage;\n    }\n};\n\nconst component = {\n    view: (ctrl, opts = {}) => {\n        const size = sizeFromType(opts.type);\n        opts.content = m('div',\n            {\n                class: CSS_CLASSES.animation\n            }, [\n                m('div', {\n                    class: [CSS_CLASSES.circle, CSS_CLASSES.circleLeft].join(' ')\n                }),\n                m('div', {\n                    class: [CSS_CLASSES.circle, CSS_CLASSES.circleRight].join(' ')\n                })\n            ]\n        );\n        opts.class = [\n            CSS_CLASSES.block,\n            opts.class\n        ].join(' ');\n        opts.getPercentage = (percentage, ctrl) => (handlePercentage(percentage, ctrl, size, opts));\n        return m.component(spinner, opts);\n    }\n};\n\nexport default component;\n"]}