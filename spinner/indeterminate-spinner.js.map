{"version":3,"sources":["indeterminate-spinner.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAgBA,IAAM,cAAc;AAChB,WAAO,0BAAP;AACA,eAAW,qCAAX;AACA,WAAO,iCAAP;AACA,YAAQ,mCAAR;AACA,cAAU,qCAAV;AACA,YAAQ,kCAAR;AACA,mBAAe,0CAAf;AACA,uBAAmB,gDAAnB;AACA,wBAAoB,iDAApB;CATE;;;;;;;;;;;;AAYN,IAAM,QAAQ,SAAR,KAAQ,CAAC,GAAD;WACV,uBAAE,KAAF,EACI;AACI,eAAO,CAAC,YAAY,KAAZ,EAAmB,YAAY,MAAZ,GAAqB,GAArB,CAApB,CAA8C,IAA9C,CAAmD,GAAnD,CAAP;KAFR,EAGO,CACC,uBAAE,KAAF,EAAS;AACL,eAAO,CAAC,YAAY,aAAZ,EAA2B,YAAY,iBAAZ,CAA5B,CAA2D,IAA3D,CAAgE,GAAhE,CAAP;KADJ,EAEG,uBAAE,KAAF,EAAS;AACR,eAAO,YAAY,MAAZ;KADR,CAFH,CADD,EAMC,uBAAE,KAAF,EAAS;AACL,eAAO,YAAY,QAAZ;KADX,EAEG,uBAAE,KAAF,EAAS;AACR,eAAO,YAAY,MAAZ;KADR,CAFH,CAND,EAWC,uBAAE,KAAF,EAAS;AACL,eAAO,CAAC,YAAY,aAAZ,EAA2B,YAAY,kBAAZ,CAA5B,CAA4D,IAA5D,CAAiE,GAAjE,CAAP;KADJ,EAEG,uBAAE,KAAF,EAAS;AACR,eAAO,YAAY,MAAZ;KADR,CAFH,CAXD,CAHP;CADU;;AAwBd,IAAM,YAAY;AACd,UAAM,cAAC,IAAD,EAAqB;YAAd,6DAAO,kBAAO;;AACvB,aAAK,OAAL,GAAe,uBAAE,KAAF,EAAS;AACpB,mBAAO,YAAY,SAAZ;SADI,EAEZ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAU,GAAV,CAAc,UAAC,GAAD;mBAAU,MAAM,GAAN;SAAV,CAFF,CAAf,CADuB;AAIvB,aAAK,KAAL,GAAa,CACT,YAAY,KAAZ,EACA,KAAK,KAAL,CAFS,CAGX,IAHW,CAGN,GAHM,CAAb,CAJuB;AAQvB,eAAO,kBAAE,SAAF,oBAAqB,IAArB,CAAP,CARuB;KAArB;CADJ;;kBAaS","file":"indeterminate-spinner.js","sourcesContent":["/*\nDerived from https://github.com/PolymerElements/paper-spinner\n\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport m from 'mithril';\nimport spinner from 'polythene/spinner/spinner';\nimport 'polythene/spinner/theme/indeterminate/theme';\n\nconst CSS_CLASSES = {\n    block: 'pe-spinner-indeterminate',\n    animation: 'pe-spinner-indeterminate__animation',\n    layer: 'pe-spinner-indeterminate__layer',\n    layerN: 'pe-spinner-indeterminate__layer--',\n    gapPatch: 'pe-spinner-indeterminate__gap-patch',\n    circle: 'pe-spinner-indeterminate__circle',\n    circleClipper: 'pe-spinner-indeterminate__circle-clipper',\n    circleClipperLeft: 'pe-spinner-indeterminate__circle-clipper--left',\n    circleClipperRight: 'pe-spinner-indeterminate__circle-clipper--right'\n};\n\nconst layer = (num) => (\n    m('div',\n        {\n            class: [CSS_CLASSES.layer, CSS_CLASSES.layerN + num].join(' ')\n        }, [\n            m('div', {\n                class: [CSS_CLASSES.circleClipper, CSS_CLASSES.circleClipperLeft].join(' ')\n            }, m('div', {\n                class: CSS_CLASSES.circle\n            })),\n            m('div', {\n                class: CSS_CLASSES.gapPatch\n            }, m('div', {\n                class: CSS_CLASSES.circle\n            })),\n            m('div', {\n                class: [CSS_CLASSES.circleClipper, CSS_CLASSES.circleClipperRight].join(' ')\n            }, m('div', {\n                class: CSS_CLASSES.circle\n            }))\n        ]\n    )\n);\n\nconst component = {\n    view: (ctrl, opts = {}) => {\n        opts.content = m('div', {\n            class: CSS_CLASSES.animation\n        }, [1,2,3,4].map((num) => (layer(num))));\n        opts.class = [\n            CSS_CLASSES.block,\n            opts.class\n        ].join(' ');\n        return m.component(spinner, opts);\n    }\n};\n\nexport default component;\n"]}